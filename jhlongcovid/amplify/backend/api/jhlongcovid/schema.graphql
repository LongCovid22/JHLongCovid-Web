"""
MapData - Object that will be queried for on map pan/zoom. Will contain summary-level
  information to show within map markers and within panels that we want to display over
  the map markers.

  Access Patterns:
    - Based on the level ("state" | "county") give all map data sorted by latitude and longitude
"""
type MapData
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  level: String! @primaryKey(sortKeyFields: ["lat", "long"]) # represents location level e.g. "state" | "county"
  name: String!
  stateAbbrev: String!
  lat: Float!
  long: Float!
  covidSummary: CovidSummary!
  symptomSummary: SymptomSummary!
  vaccinationSummary: VaccinationSummary!
  generealHealthSummary: GeneralHealthSummary!
  recoverySummary: RecoverySummary!
  socialSummary: SocialSummary!
  totalFullEntries: Int! # total survey entries at that given state or county.
  # Could be used to give percentages using numbers from the summary objects
}

"""
User - Store User specific information. Will store notification preferences along with other
  activity metrics
"""
type User @model @auth(rules: [{ allow: owner }]) {
  id: ID! # Cognito ID
  email: String!  # Email associated with account
    @index(
      name: "byEmail"
      sortKeyFields: ["createdAt"]
      queryField: "usersByEmail"
    )
  age: Int # null if signed up aside from survey
  race: Race # null if signed up aside from survey
  sex: String # null if signed up aside from survey
  lastSubmission: AWSDateTime # null if signed up aside from survey
  lastSignIn: AWSDateTime! # Current DateTime at time of sign up after "autosignin"
  notificationFreq: NotificationFrequency # Daily
  notificaitonMethod: NotificationMethod # Email
  createdAt: AWSDateTime! # Will automatically be populated
}

enum Race {
  WHITE
  BLACK
  ASIAN
  NATIVE
  HISPANIC
  OTHER
  NONE # For people who opt out
}

enum NotificationFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum NotificationMethod {
  EMAIL
  PUSH
}

"""
SurveyEntry - Represents the result of an entire User's survey.

  Access Patterns:
    - Get all surveys performed by a user (specified by User ID)
    - Get all surveys by type (daily, weekly, monthly, guest)
"""
type SurveyEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  email: String
    @index(
      name: "byEmail"
      sortKeyFields: ["createdAt"]
      queryField: "surveysByEmail"
    )
  createdAt: AWSTime!
  surveyVersion: Int!
  surveyType: SurveyType!
    @index(
      name: "byType"
      sortKeyFields: ["createdAt"]
      queryField: "surveysByType"
    )
  age: Int!
  race: Race!
  sex: String!
  timeElapsed: AWSDateTime
  covidEntry: CovidEntry @hasOne
  vaccinationEntry: VaccinationEntry @hasOne
  socialDeterminantsEntry: SocialDeterminantsEntry @hasOne
  recoveryEntry: RecoveryEntry @hasOne
  generalHealthEntry: GeneralHealthEntry @hasOne
  symptomsEntry: SymptomEntry @hasOne
  monthlyEntry: MonthlyEntry @hasOne
}

enum SurveyType {
  DAILY
  WEEKLY
  MONTHLY
  GUEST
}

"""
Vaccination Entry - Represents the results of the vaccination subsection of the survey entry.

  Access Patterns:
    - Get all vaccination entries for a given state, sorted by date
    - Get all vaccination entries for a given county, sorted by date
    - ** Any other access patterns that I am forgetting? **
"""
type VaccinationEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateVaccEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateVaccEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateVaccEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateVaccEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyVaccEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyVaccEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyVaccEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyVaccEntryBySex"
    )
  age: Int!
  race: Race!
  sex: String!
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  totalVaccineShots: Int
  vaccinated: Boolean
  vaccineType: String
  dateOfLastVaccine: AWSDateTime
  createdAt: AWSDateTime!
}

"""
Covid Entry - Represents the results of the covid subsections of the survey entry.

  Access Patterns:
      - Get all covid entries for a given state, sorted by date
      - Get all covid entries for a given county, sorted by date
      - ** Any other access patterns that I am forgetting? **
"""
type CovidEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateCovidEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateCovidEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateCovidEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateCovidEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyCovidEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyCovidEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyCovidEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyCovidEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  timesPositive: Int
  lastPositive: AWSDateTime
  tested: Boolean
  testMethod: String
  hospitalized: Int
  symptomatic: Boolean
  symptomsPreventScale: String
  medicationsTaken: [String]
  returnedToHealth: Int
  createdAt: AWSDateTime!
}

type RecoveryEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateRecovEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateRecovEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateRecovEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateRecovEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyRecovEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyRecovEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyRecovEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyRecovEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  recovered: String
  lengthOfRecovery: RecoveryLength
  hasLongCovid: String
  createdAt: AWSDateTime!
}

type RecoveryLength {
  months: Int
  days: Int
}

type GeneralHealthEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateGenHealthEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateGenHealthEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateGenHealthEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateGenHealthEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyGenHealthEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyGenHealthEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyGenHealthEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyGenHealthEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  health: Int!
  generalHealthResults: AWSJSON!
  totalScore: Int!
  createdAt: AWSDateTime!
}

"""
Pre Covid Symptoms - Model for keeping track of symptoms recorded during pre covid symptom section

  Access Patterns:
      - Get all pre covid symptom entries for a given state, sorted by date
      - Get all pre covid symptom entries for a given county, sorted by date
      - ** More will be added once we agree on the set of symptoms **
"""
type SymptomEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateSymptomEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateSymptomEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateSymptomEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateSymptomEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countySymptomEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countySymptomEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countySymptomEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countySymptomEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  createdAt: AWSDateTime!
  symptoms: AWSJSON!
  medicalConditions: [String]!
}

type SocialDeterminantsEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateSocialDetEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateSocialDetEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateSocialDetEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateSocialDetEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countySocialDetEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countySocialDetEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countySocialDetEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countySocialDetEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  hasMedicalInsurance: String
  difficultCoveringExpenses: String
  currentWorkSituation: String
  createdAt: AWSDateTime!
}

type MonthlyEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateMonthlyEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateMonthlyEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateMonthlyEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateMonthlyEntryBySex"
    )
  countyState: String!
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyMonthlyEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyMonthlyEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyMonthlyEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyMonthlyEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  results: AWSJSON
  createdAt: AWSDateTime!
}

# -------- Summary Types --------
# These summary types are to be updated on each survey entry for both the state and county levels.
# They represent information that could be displayed on click or hover of a map marker.
# The aim of having these types is to avoid extra queries as a user navigates throughout the map.

type CovidSummary {
  covidCount: AWSJSON
  percentHospitalizedDueToCovid: AWSJSON
  avgPositiveCasesPerPerson: AWSJSON
  percentSymptomatic: AWSJSON
  percentTookMedication: AWSJSON
  medicationCounts: AWSJSON
  percentRecovered: AWSJSON
}

type SymptomSummary {
  mostCommonSymptom: AWSJSON
  symptomCounts: AWSJSON
}

type VaccinationSummary {
  percentVaccinated: AWSJSON
  avgNumOfVaccPerPerson: AWSJSON
  pfizerCount: AWSJSON
  modernaCount: AWSJSON
  jjCount: AWSJSON
  azCount: AWSJSON
}

type RecoverySummary {
  longCovidCount: AWSJSON
  percentLongCovid: AWSJSON
  avgRecoveryLength: AWSJSON
}

type GeneralHealthSummary {
  avgTotalScore: AWSJSON
  avgHealthCounts: AWSJSON
}

type SocialSummary {
  percentHaveMedicalInsurance: AWSJSON
  percentDifficultyCoveringExpenses: AWSJSON
  averageWorkingSituation: AWSJSON
  workingSituationCounts: AWSJSON
}
# -------------------------------
