"""
MapData - Object that will be queried for on map pan/zoom. Will contain summary-level
  information to show within map markers and within panels that we want to display over
  the map markers.

  Access Patterns:
    - Based on the level ("state" | "county") give all map data sorted by latitude and longitude
"""
type MapData
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  level: String!
    @primaryKey(sortKeyFields: ["lat", "long"])
    @index(
      name: "byLevelAndNameAndState"
      sortKeyFields: ["name", "stateAbbrev"]
      queryField: "mapDataByLevelNameState"
    ) # represents location level e.g. "state" | "county"
    @index(
      name: "byState"
      sortKeyFields: ["stateAbbrev"]
      queryField: "mapDataByStateAbbrev"
    )
  name: String!
  stateAbbrev: String!
  lat: Float!
  long: Float!
  covidSummary: CovidSummary!
  recoverySummary: RecoverySummary!
  vaccinationSummary: VaccinationSummary!
  globalHealthSummary: GlobalHealthSummary!
  symptomSummary: SymptomSummary!
  medicalConditionsSummary: MedicalConditionsSummary!
  socialSummary: SocialSummary!
  totalFullEntries: Int!
  totalDemoCount: AWSJSON!
}

"""
User - Store User specific information. Will store notification preferences along with other
  activity metrics
"""
type User
  @model
  @auth(rules: [{ allow: owner }, { allow: private, provider: iam }]) {
  id: ID! # Cognito ID
  email: String!  # Email associated with account
    @index(
      name: "byEmail"
      sortKeyFields: ["createdAt"]
      queryField: "usersByEmail"
    )
  age: Int # null if signed up aside from survey
  race: Race # null if signed up aside from survey
  sex: String # null if signed up aside from survey
  height: String
  weight: String
  lastSubmission: AWSDateTime # null if signed up aside from survey
  lastSignIn: AWSDateTime # Current DateTime at time of sign up after "autosignin"
  notificationFreq: NotificationFrequency # Daily
  notificaitonMethod: NotificationMethod # Email
  createdAt: AWSDateTime! # Will automatically be populated
}

enum Race {
  WHITE
  BLACK
  ASIAN
  NATIVE
  HISPANIC
  OTHER
  NONE # For people who opt out
}

enum NotificationFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum NotificationMethod {
  EMAIL
  PUSH
}

"""
SurveyEntry - Represents the result of an entire User's survey.

  Access Patterns:
    - Get all surveys performed by a user (specified by User ID)
    - Get all surveys by type (daily, weekly, monthly, guest)
"""
type SurveyEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  email: String
    @index(
      name: "byEmail"
      sortKeyFields: ["createdAt"]
      queryField: "surveysByEmail"
    )
  createdAt: AWSDateTime!
  surveyVersion: Int!
  surveyType: SurveyType!
    @index(
      name: "byType"
      sortKeyFields: ["createdAt"]
      queryField: "surveysByType"
    )
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  covidEntry: CovidEntry @hasOne
  vaccinationEntry: VaccinationEntry @hasOne
  socialDeterminantsEntry: SocialDeterminantsEntry @hasOne
  recoveryEntry: RecoveryEntry @hasOne
  globalHealthEntry: GlobalHealthEntry @hasOne
  PatientHealthEntry: PatientHealthEntry @hasOne
  symptomsEntry: SymptomEntry @hasOne
  monthlyEntry: MonthlyEntry @hasOne
}

enum SurveyType {
  DAILY
  WEEKLY
  MONTHLY
  GUEST
}

"""
Vaccination Entry - Represents the results of the vaccination subsection of the survey entry.

  Access Patterns:
    - Get all vaccination entries for a given state, sorted by date
    - Get all vaccination entries for a given county, sorted by date
    - ** Any other access patterns that I am forgetting? **
"""
type VaccinationEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateVaccEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateVaccEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateVaccEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateVaccEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyVaccEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyVaccEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyVaccEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyVaccEntryBySex"
    )
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  totalVaccineShots: Int
  vaccinated: String # Changed
  vaccineType: String
  dateOfLastVaccine: AWSDateTime
  createdAt: AWSDateTime!
}

type GlobalHealthEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateGHEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateGHEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateGHEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateGHEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyGHEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyGHEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyGHEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyGHEntryBySex"
    )
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  healthRank: String
  physicalHealthRank: String
  carryPhysicalActivities: String
  fatigueRank: String
  painLevel: Int
  createdAt: AWSDateTime!
}

"""
Covid Entry - Represents the results of the covid subsections of the survey entry.

  Access Patterns:
      - Get all covid entries for a given state, sorted by date
      - Get all covid entries for a given county, sorted by date
      - ** Any other access patterns that I am forgetting? **
"""
type CovidEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateCovidEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateCovidEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateCovidEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateCovidEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyCovidEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyCovidEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyCovidEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyCovidEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: public, operations: [create] }
      ]
    )
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  beenInfected: Boolean
  timesPositive: Int
  lastPositive: AWSDateTime
  tested: Boolean
  positiveTest: String #Changed
  testMethod: String
  hospitalized: Boolean
  timesHospitalized: Int
  symptomatic: Boolean
  symptomsPreventScale: String
  medicationsPrescribed: String # changed
  medicationsTaken: [String]
  createdAt: AWSDateTime!
}

type RecoveryEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateRecovEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateRecovEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateRecovEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateRecovEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyRecovEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyRecovEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyRecovEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyRecovEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  recovered: Boolean
  lengthOfRecovery: Int # num of days
  createdAt: AWSDateTime!
}

type PatientHealthEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "statePatientHealthEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "statePatientHealthEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "statePatientHealthEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "statePatientHealthEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyPatientHealthEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyPatientHealthEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyPatientHealthEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyPatientHealthEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  generalHealthResults: AWSJSON!
  totalScore: Int!
  createdAt: AWSDateTime!
}

"""
Pre Covid Symptoms - Model for keeping track of symptoms recorded during pre covid symptom section

  Access Patterns:
      - Get all pre covid symptom entries for a given state, sorted by date
      - Get all pre covid symptom entries for a given county, sorted by date
      - ** More will be added once we agree on the set of symptoms **
"""
type SymptomEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateSymptomEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateSymptomEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateSymptomEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateSymptomEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countySymptomEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countySymptomEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countySymptomEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countySymptomEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  createdAt: AWSDateTime!
  symptoms: [String]
  qualityOfLifeRank: String
  mentalHealthRank: String
  socialSatisfactionRank: String
  carryOutSocialActivitiesRank: String
  anxietyInPastWeekRank: String
  medicalConditions: [String]
  hasLongCovid: String # changed
}

type SocialDeterminantsEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateSocialDetEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateSocialDetEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateSocialDetEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateSocialDetEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countySocialDetEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countySocialDetEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countySocialDetEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countySocialDetEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  hasMedicalInsurance: Boolean
  difficultCoveringExpenses: String
  currentWorkSituation: String
  createdAt: AWSDateTime!
}

type MonthlyEntry
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  state: String!
    @index(
      name: "byStateSortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "stateMonthlyEntryByDate"
    )
    @index(
      name: "byStateSortByAge"
      sortKeyFields: ["age"]
      queryField: "stateMonthlyEntryByAge"
    )
    @index(
      name: "byStateSortByRace"
      sortKeyFields: ["race"]
      queryField: "stateMonthlyEntryByRace"
    )
    @index(
      name: "byStateSortBySex"
      sortKeyFields: ["sex"]
      queryField: "stateMonthlyEntryBySex"
    )
  countyState: String
    @index(
      name: "byCountySortByDate"
      sortKeyFields: ["createdAt"]
      queryField: "countyMonthlyEntryByDate"
    )
    @index(
      name: "byCountySortByAge"
      sortKeyFields: ["age"]
      queryField: "countyMonthlyEntryByAge"
    )
    @index(
      name: "byCountSortByRace"
      sortKeyFields: ["race"]
      queryField: "countyMonthlyEntryByRace"
    )
    @index(
      name: "byCountSortBySex"
      sortKeyFields: ["sex"]
      queryField: "countyMonthlyEntryBySex"
    )
  surveyEntry: SurveyEntry
    @belongsTo
    @auth(rules: [{ allow: private, provider: iam }])
  age: Int!
  race: Race!
  sex: String!
  height: String!
  weight: String!
  results: AWSJSON
  createdAt: AWSDateTime!
}

# -------- Summary Types --------
# These summary types are to be updated on each survey entry for both the state and county levels.
# They represent information that could be displayed on click or hover of a map marker.
# The aim of having these types is to avoid extra queries as a user navigates throughout the map.

type CovidSummary {
  #one person, one count (as long as infected in past before?)
  covidCount: AWSJSON
  avgPositiveCasesPerPerson: AWSJSON
  percentHospitalizedDueToCovid: AWSJSON
  avgHospitalizationsPerPerson: AWSJSON
  percentSymptomatic: AWSJSON
  avgSymptomPreventDailyTasks: AWSJSON
  percentTookMedication: AWSJSON
  medicationCounts: MedicationsAvailable
  #From recovery result?
  # percentRecovered: AWSJSON
}

type MedicationsAvailable {
  antiViral: AWSJSON
  oralSteroids: AWSJSON
  antiBiotics: AWSJSON
  other: AWSJSON
  dontKnow: AWSJSON
}

type RecoverySummary {
  recoveryCount: AWSJSON
  avgRecoveryLength: AWSJSON
}

#change types to "Pfizer", "Moderna", "Janssen", "Novavax", "Other", "Do not know"
type VaccinationSummary {
  percentVaccinated: AWSJSON
  avgNumOfVaccPerPerson: AWSJSON
  vaccineCount: VaccineTypes
}

type VaccineTypes {
  pfizer: AWSJSON
  moderna: AWSJSON
  janssen: AWSJSON
  novavax: AWSJSON
  other: AWSJSON
  doNotKnow: AWSJSON
}

type GlobalHealthSummary {
  avgGeneralHealth: AWSJSON
  avgPhysicalHealth: AWSJSON
  avgEverydayPhysicalCompetency: AWSJSON
  avgFatigue: AWSJSON
  avgPain: AWSJSON
}

#TODO!
type SymptomSummary {
  avgQualityOfLife: AWSJSON
  avgMentalHealth: AWSJSON
  avgSocialActivitesRelationships: AWSJSON
  avgSocialActivitiesCapacity: AWSJSON
  avgEmotionalProblems: AWSJSON
  symptomCounts: SymptomsAvailabLe
}
type SymptomsAvailabLe {
  headache: AWSJSON
  bodyMuscleAche: AWSJSON
  feverChillsSweatsFlushing: AWSJSON
  faintDizzyGoofy: AWSJSON
  postExertionalMalaise: AWSJSON
  weaknessInArmsLegs: AWSJSON
  shortnessOfBreath: AWSJSON
  cough: AWSJSON
  palpitations: AWSJSON
  swellingOfLegs: AWSJSON
  indigestionNausea: AWSJSON
  bladderProblem: AWSJSON
  nerveProblems: AWSJSON
  brainFog: AWSJSON
  anxietyDepressionNightmares: AWSJSON
  problemsThinkingConcentrating: AWSJSON
  problemsAnxietyDepressionStress: AWSJSON
  difficultyFallingAsleep: AWSJSON
  sleepyDuringDaytime: AWSJSON
  loudSnoring: AWSJSON
  uncomfortableFeelingsInLegs: AWSJSON
  skinRash: AWSJSON
  lossOfChangeInSmell: AWSJSON
  excessiveThirst: AWSJSON
  excessiveDryMouth: AWSJSON
  visionProblems: AWSJSON
  hearingProblems: AWSJSON
  #add to the statistic only for women
  fertilityProblemsForWomen: AWSJSON
}

type MedicalConditionsSummary {
  percentHaveLongCovid: AWSJSON
  newDiagnosisCounts: DiagnosisTypes
}

type DiagnosisTypes {
  noNewDiagnosis: AWSJSON
  heartProblems: AWSJSON
  lungProblems: AWSJSON
  bloodClotLung: AWSJSON
  sleepApnea: AWSJSON
  memory: AWSJSON
  migraine: AWSJSON
  stroke: AWSJSON
  seizure: AWSJSON
  kidneyProblems: AWSJSON
  stomachProblems: AWSJSON
  psychologicalProblems: AWSJSON
  diabetes: AWSJSON
  autoImmuneDiseases: AWSJSON
  mecfs: AWSJSON
  other: AWSJSON
  notSure: AWSJSON
}

type SocialSummary {
  percentHaveMedicalInsurance: AWSJSON
  averageDifficultyCoveringExpenses: AWSJSON
  workingSituationCounts: WorkingSituation
}

type WorkingSituation {
  workingOutsideTheHome: AWSJSON
  onLeaveFromAJobWorkingOutsideHome: AWSJSON
  workingInsideHome: AWSJSON
  lookingForWorkUnemployed: AWSJSON
  retired: AWSJSON
  disabled: AWSJSON
  student: AWSJSON
  dontKnow: AWSJSON
  preferNotToAnswer: AWSJSON
}

# #GeneralHealthResults
# type PatientHealthSummary {
#   #tot score?
#   avgTotalScore: AWSJSON
#   #same idea of sympotoms
#   avgHealthCounts: GeneralHealthQuestions
# }

# #Excellent = 5, ...., Poor = 1
# type GeneralHealthQuestions {
#   generalHealth: AWSJSON
#   qualityOfLife: AWSJSON
#   physicalHealth: AWSJSON
#   mentalHealth: AWSJSON
#   socialActivitiesRelationships: AWSJSON
#   socialActivitiesRoles: AWSJSON
# }

#DONE

#DONE

# -------------------------------
# LAMBDA RESOLVERS

type Mutation {
  aggregateSurveyResults(results: SurveyResults!): Response
    @function(name: "aggregateSurveyResults-${env}")
}

input SurveyResults {
  surveyResults: AWSJSON!
}

type Response {
  statusCode: Int
  body: String
}
