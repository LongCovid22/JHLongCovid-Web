import { SummaryDemos } from "./answerTypes";
import { API } from "aws-amplify";
import { GetMapDataQuery, ListMapAggregationsQuery, GetMapAggregationNewQuery } from "../../../src/API";
import { countySocialDetEntryByAge } from "../../../src/graphql/queries";

import { properties} from "./queryVariables";

export const backgroundColors = {
  red: "rgba(255, 99, 132, 0.45)",
  orange: "rgba(255, 159, 64, 0.45)",
  yellow: "rgba(255, 205, 86, 0.45)",
  green: "rgba(75, 192, 192, 0.45)",
  blue: "rgba(54, 162, 235, 0.45)",
  purple: "rgba(153, 102, 255, 0.45)",
};

/**
 * The createTotalsChartData() function takes in an object and returns an object with two properties: labels and chartData.
 * The labels property is an array of strings, and the chartData property is an array of numbers.
 * @param data An object that contains keys for each value that you want to include in the chart.
 * Each key should be a string, and the corresponding value should be a `SummaryDemos` object
 * @returns An object with the following properties:
 * - labels: An array of strings, where each string is the label for a value in the chart. The labels are generated by converting the keys in the data object from camel case.
 * - chartData: An array of numbers, where each number is the sum of the values in the values array for the corresponding key in the data object.
 */
export const createTotalsChartData = (data: object) => {
  let labels: string[] = [];
  let chartData: number[] = [];
  Object.keys(data).forEach((value: string) => {
    let summariesDemo: SummaryDemos = data[value as keyof object];
    labels.push(convertCamelCase(value));
    chartData.push(
      summariesDemo.race.values.reduce(
        (acc: number, curr: number) => acc + curr,
        0
      )
    );
  });

  return { labels, chartData };
};

export const createTotalsChartConfig = (
  data: object,
  title: string,
  label: string,
  backgroundColors?: string[]
) => {
  const { labels, chartData } = createTotalsChartData(data);
  const config = {
    labels: labels,
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxis: {
          ticks: {
            font: {
              family: "Gentona",
              size: 13,
            },
          },
        },
        yAxis: {
          ticks: {
            font: {
              family: "Gentona",
              size: 13,
            },
            stepSize: 1
          },
        },
      },
      plugins: {
        legend: (label) ? ({
          position: "top" as const,
        }) : false,
        title: {
          display: true,
          text: title,
          font: {
            size: 18,
            family: "Gentona",
          },
        },
        datalabels: {
          anchor: "end",
          align: "top",
          formatter: Math.round,
          font: {
            weight: "bold",
            size: 16,
            family: "Gentona",
          },
        },
      },
    },
    data: {
      labels,
      datasets: [
        {
          label: label,
          data: chartData,
          borderColor: "rgb(255, 99, 132)",
          backgroundColor: backgroundColors
            ? backgroundColors
            : "rgba(9, 30, 235, 0.5)",
        },
      ],
    },
  };
  return config;
};

export const createTotalsChartConfigWithXYLabels = (
  XAxisLabel: string,
  YAxisLabel: string,
  data: object,
  title: string,
  label: string,
  backgroundColors?: string[]
) => {

  const { labels, chartData } = createTotalsChartData(data);

  
  const config = {
    labels: labels,
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxis: {
          ticks: {
            font: {
              family: "Gentona",
              size: 13,
            },
          }, 
          title: {
            display: true,
            text: XAxisLabel,
            font: {
              family: "Gentona",
              size: 16,
            },
            position: 'left'
          },
        },
        yAxis: {
          ticks: {
            font: {
              family: "Gentona",
              size: 13,
            },
            stepSize: 1
          },
          title: { // Add y-axis label
            display: true,
            text: YAxisLabel,
            font: {
              family: "Gentona",
              size: 16,
            },
            position: 'left'
          },
        },
      },
      plugins: {
        legend: (label) ? ({
          position: "top" as const,
        }) : false,
        title: {
          display: true,
          text: title,
          font: {
            size: 18,
            family: "Gentona",
          },
        },
        datalabels: {
          anchor: "end",
          align: "top",
          formatter: Math.round,
          font: {
            weight: "bold",
            size: 16,
            family: "Gentona",
          },
        },
      },
    },
    data: {
      labels,
      datasets: [
        {
          label: label,
          data: chartData,
          borderColor: "rgb(255, 99, 132)",
          backgroundColor: backgroundColors
            ? backgroundColors
            : "rgba(9, 30, 235, 0.5)",
        },
      ],
    },
  };
  return config;
};

export const getMostCommonInSummary = (data: object) => {
  let max = 0;
  let symptom = "None";
  Object.keys(data).forEach((value: string) => {
    let demo: SummaryDemos = data[value as keyof object];
    let count = demo.race.values.reduce(
      (acc: number, curr: number) => acc + curr,
      0
    );
    if (count > max) {
      max = count;
      symptom = convertCamelCase(value);
    }
  });
  return symptom;
};

export const convertCamelCase = (input: string): string => {
  // Use a regular expression to match words with upper case letters
  const regEx = /[A-Z]/g;

  // Replace each matched word with the word followed by a space
  const convertedString = input.replace(regEx, (match) => ` ${match}`);

  // Split the string into an array of words
  const words = convertedString.split(" ");

  // Capitalize the first word and lowercase the rest of the words
  words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
  // for (let i = 1; i < words.length; i++) {
  //   words[i] = words[i].toLowerCase();
  // }

  // Join the array of words back into a string and return it
  return words.join(" ");
};

type AggregationType = "LONG" | "TOTAL"

export const getSummariesWithType = async (data: any, type: AggregationType) => {
  const { level, lat, long } = data;
  const getSummariesQuery = `
    query GET_SUMMARIES($level: String!, $lat: Float!, $long: Float!) {
      getMapAggregationNew(aggregationType: ${type}, level: $level, lat: $lat, long: $long) {
        ${properties}
      }
    }
  `;

  try {
    const covidSummary = (await API.graphql({
      query: getSummariesQuery,
      variables: { level: level, lat: lat, long: long },
      authMode: "API_KEY",
    })) as { data?: GetMapAggregationNewQuery; errors: any[] };
    if (covidSummary.data?.getMapAggregationNew) {
      return covidSummary.data.getMapAggregationNew;
    }
  } catch (error) {
    console.log("error getting covid summary: ", error);
  }
}

//slowly deprecate this. must use the above.

export const getSummaries = async (data: any) => {
  const { level, lat, long } = data;
  const type = "TOTAL";
  const getSummariesQuery = `
    query GET_SUMMARIES($level: String!, $lat: Float!, $long: Float!) {
      getMapData(aggregationType: ${type}, level: $level, lat: $lat, long: $long) {
        ${properties}
      }
    }
  `;

  try {
    const covidSummary = (await API.graphql({
      query: getSummariesQuery,
      variables: { level: level, lat: lat, long: long },
      authMode: "API_KEY",
    })) as { data?: GetMapDataQuery; errors: any[] };
    if (covidSummary.data) {
      return covidSummary.data.getMapData;
    }
  } catch (error) {
    // console.log("error getting covid summary: ", error);
  }
};
